#+TITLE: Society of Mind
#+STARTUP: hidestars indent
* The Society of Mind
** Building blocks
     :PROPERTIES:
     :CUSTOM_ID: building-blocks
     :END:

   Agents - small independent parts of doing an activity that are essentially mindless on their own, but when working together with other agents form a meaningful, well thought out action.

   For example, drinking a up of tea involves multiple agents --- an agent to see the cup, an agent to move the arm and hand towards the cup, an agent to grasp it, one to make sure it doesn't spill, etc. All these do their independent jobs mindlessly, because they can depend on one another. Like, the grasping agent need not worry about the movement agent doing its job.

*** The world of blocks
      :PROPERTIES:
      :CUSTOM_ID: the-world-of-blocks
      :END:

   Imagine a child building a tower of blocks. The action is to grow a tower by placing blocks on top of one another. This activity is complex enough for a single agent to perform. So, there are multiple agents involved each doing their thing. The /Find/ agent is responsible for seeing/identifying a block that could be of a different shape, color, in a different surrounding. The /move/ agent is responsible for moving the arm and hand to pick up a block. The grasp agent... You get the idea.

   If you were to watch a builder work, from the outside, with know knowledge of how it works on the inside, you'd think it know how to build. But if you could see the builder work from the inside, you'd see nothing there; nothing more than few switches.

   This brings us to the distinction - *agent* and *agency*. Builder is both an agent and an agency. As an agency it seems to know its job. As an agent, it cannot know anything at all.

** Wholes and Parts
     :PROPERTIES:
     :CUSTOM_ID: wholes-and-parts
     :END:

*** Components and Connections
      :PROPERTIES:
      :CUSTOM_ID: components-and-connections
      :END:

   The builder was broken down into agents but that's not enough. Builder is not just a collection of parts like find, grasp, put, etc. A builder cannot work unless all the parts interacted with each other.

   We can't just predict what the builder does by looking at the individual parts. Because we won't know which part belongs to which action. Similarly, we can't figure out much about a society by looking at what a single person does. It's the same for understanding any complex system.
   There are 3 steps:

   1. Understand how each separate part works
   2. Understand how each part interacts with those to which it's connected
   3. Understand how local interactions combine to accomplish what the
      system does

*** Parts and wholes
      :PROPERTIES:
      :CUSTOM_ID: parts-and-wholes
      :END:

   /Gestalt/ is when things combine to act in a way we can't explain.
   /Holistic/ is when we're caught off guard with unexpected happenings and realize that we understand less than we thought we did.

   There are /subjective/ and /objective/ questions. Subjective questions are like - how is a drawing different from a collection of lines, or how a cultural performance invokes a kind of feeling in you. Objective questions are like - how does the pillar support the building, how do chain links stay locked.

   Objective questions are easier to answer because we can prove it. As adults they seem obvious to us, but as children those were hard concepts to understand. Subjective questions are harder to answer because it is said to depend on the mind. But that means, if we understand our mind (we we don't), then we'll be able to answer subjective questions.

** Conflict and compromise
     :PROPERTIES:
     :CUSTOM_ID: conflict-and-compromise
     :END:

*** Conflict
      :PROPERTIES:
      :CUSTOM_ID: conflict
      :END:

   Suppose there's an agent called Wrecker that wants to knock down the blocks built by builder. Suppose Wrecker gets activated, but there's nothing to smash. Then Wrecker will have to get some help. It'll activate Builder to build the tower so that once it's high enough, it can smash it.

   But the builder wants to continue building. Who decides if the building must continue or not? The simplest policy would be for the Wrecker to decide because that's what activated the Builder in the first place.

   But in a child's mind, such choices would depend on many other agencies. Let's assume both Builder and Wrecker were activated by the agency, Play-With-Blocks. Then, a conflict might arise if Builder and Wrecker disagree about whether the tower is high enough.

   What activated Play-With-Blocks in the first place? Perhaps, another higher level agency called Play which gave a choice between Play-With-Blocks, Play-With-Dolls and Play-With-Animals. Going even higher up, Play may have been decided between Eat and Sleep as other choices.

   Because, a child's play is not an isolated thing. But always happens in context of other real life concerns. Whatever we may choose to do, there are always other things we'd also like to do.

   If the conflict between Builder and Wrecker isn't settled soon, it will threaten the ability its higher level agent, Play-With-Blocks to suppress its rivals, Play-With-Dolls and Play-With-Animals. Next, if that conflict isn't settled soon, it'll weaken the agent Play at the next higher level and their rivals Eat or Sleep may seize control.

*** Noncompromise
      :PROPERTIES:
      :CUSTOM_ID: noncompromise
      :END:

   The principle of noncompromise: the longer an internal conflict persists among an agent's subordinates, the weaker becomes that agent's status among its own competitors. If such internal problems aren't settled soon, other agents will take control and the agents formerly involved will be dismissed.

   As long as playing with blocks goes well, Play can maintain its strength and keep control. But once the child starts to become hungry or sleepy, Play gets weaker. It can keep Eat and Sleep at bay for some time, but the longer it fights, the stronger eat and sleep become.

*** Hierarchies
      :PROPERTIES:
      :CUSTOM_ID: hierarchies
      :END:

   As an agent, Builder does no actual work. It only calls Begin, Add and End. Similarly, Add calls Find, Put and Get to do its job. It keeps going like this until we get to actual muscle motors that do the actual job.

   These hierarchies are similar to human hierarchies in organizations. Once it gets too big to handle a production, the org needs people who manage other people. Likewise, we have to ask - which agents control other agents? Who decides which jobs are done? How will conflicts be settled?

   Not all agents follow the same hierarchy. For example, to a Builder, Add is a subordinate. But to Find, Add is a boss. As for yourself, it depends on how you live. Which sorts of thoughts concern you most - the orders you're made to take or those you're being forced to give?

** The Self
     :PROPERTIES:
     :CUSTOM_ID: the-self
     :END:
